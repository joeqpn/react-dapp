{"ast":null,"code":"import _regeneratorRuntime from \"/Users/joe/Documents/truffle/projects/react-dapp/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/joe/Documents/truffle/projects/react-dapp/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/joe/Documents/truffle/projects/react-dapp/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/joe/Documents/truffle/projects/react-dapp/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/joe/Documents/truffle/projects/react-dapp/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/joe/Documents/truffle/projects/react-dapp/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/joe/Documents/truffle/projects/react-dapp/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/joe/Documents/truffle/projects/react-dapp/client/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/joe/Documents/truffle/projects/react-dapp/client/src/App.js\";\nimport React, { Component } from \"react\";\nimport SimpleStorageContract from \"./contracts/SimpleStorage.json\";\nimport getWeb3 from \"./utils/getWeb3\";\nimport \"./App.css\";\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      storageValue: \"\",\n      web3: null,\n      accounts: null,\n      contract: null,\n      newValue: \"\"\n    };\n    _this.componentDidMount =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var web3, accounts, networkId, deployedNetwork, instance;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n              _this.handleChange = _this.handleSubmit.bind(_assertThisInitialized(_assertThisInitialized(_this))); // Get network provider and web3 instance.\n\n              _context.next = 5;\n              return getWeb3();\n\n            case 5:\n              web3 = _context.sent;\n              _context.next = 8;\n              return web3.eth.getAccounts();\n\n            case 8:\n              accounts = _context.sent;\n              console.log(accounts); // Get the contract instance.\n\n              _context.next = 12;\n              return web3.eth.net.getId();\n\n            case 12:\n              networkId = _context.sent;\n              console.log(networkId);\n              deployedNetwork = SimpleStorageContract.networks[networkId];\n              console.log(deployedNetwork);\n              instance = new web3.eth.Contract(SimpleStorageContract.abi, deployedNetwork && deployedNetwork.address); // Set web3, accounts, and contract to the state, and then proceed with an\n              // example of interacting with the contract's methods.\n\n              _this.setState({\n                web3: web3,\n                accounts: accounts,\n                contract: instance\n              }, _this.runExample);\n\n              _context.next = 24;\n              break;\n\n            case 20:\n              _context.prev = 20;\n              _context.t0 = _context[\"catch\"](0);\n              // Catch any errors for any of the above operations.\n              alert(\"Failed to load web3, accounts, or contract. Check console for details.\");\n              console.error(_context.t0);\n\n            case 24:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this, [[0, 20]]);\n    }));\n    _this.runExample =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2() {\n      var contract, response;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              contract = _this.state.contract; // Get the value from the contract to prove it worked.\n\n              _context2.next = 3;\n              return contract.methods.get().call();\n\n            case 3:\n              response = _context2.sent;\n\n              // Update state with the result.\n              _this.setState({\n                storageValue: response\n              });\n\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"handleChange\",\n    value: function handleChange(event) {\n      //console.log(this.state.newValue);\n      this.setState({\n        newValue: event.target.value\n      });\n    }\n  }, {\n    key: \"handleSubmit\",\n    value: function () {\n      var _handleSubmit = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(event) {\n        var _this$state, accounts, contract, response;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                event.preventDefault();\n                _this$state = this.state, accounts = _this$state.accounts, contract = _this$state.contract;\n                _context3.next = 4;\n                return contract.methods.set(this.state.newValue).send({\n                  from: accounts[0]\n                });\n\n              case 4:\n                _context3.next = 6;\n                return contract.methods.get().call();\n\n              case 6:\n                response = _context3.sent;\n                this.setState({\n                  storageValue: response\n                });\n\n              case 8:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function handleSubmit(_x) {\n        return _handleSubmit.apply(this, arguments);\n      };\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      console.log(this.state);\n\n      if (!this.state.web3) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 71\n          },\n          __self: this\n        }, \"Loading Web3, accounts, and contract...\");\n      }\n\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, \"Do this Dapp!\"), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, \"The stored value is: \", this.state.storageValue), React.createElement(\"form\", {\n        onSubmit: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, \"New Value:\", React.createElement(\"input\", {\n        type: \"text\",\n        value: this.state.newValue,\n        onChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      })), React.createElement(\"input\", {\n        type: \"submit\",\n        value: \"Submit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;\n/*\nclass App extends Component {\n  state = { storageValue: 0, web3: null, accounts: null, contract: null };\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n      console.log(accounts);\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      console.log(networkId);\n      const deployedNetwork = SimpleStorageContract.networks[networkId];\n      console.log(deployedNetwork);\n      const instance = new web3.eth.Contract(\n        SimpleStorageContract.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ web3, accounts, contract: instance }, this.runExample);\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n\n  runExample = async () => {\n    const { accounts, contract } = this.state;\n\n    // Stores a given value, 5 by default.\n    await contract.methods.set(82).send({ from: accounts[0] });\n\n    // Get the value from the contract to prove it worked.\n    const response = await contract.methods.get().call();\n\n    // Update state with the result.\n    this.setState({ storageValue: response });\n  };\n\n  render() {\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    return (\n      <div className=\"App\">\n        <h1>Good to Go!</h1>\n        <p>Your Truffle Box is installed and ready.</p>\n        <h2>Smart Contract Example</h2>\n        <p>\n          If your contracts compiled and migrated successfully, below will show\n          a stored value of 5 (by default).\n        </p>\n        <p>\n          Try changing the value stored on <strong>line 40</strong> of App.js.\n        </p>\n        <div>The stored value is: {this.state.storageValue}</div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n*/","map":{"version":3,"sources":["/Users/joe/Documents/truffle/projects/react-dapp/client/src/App.js"],"names":["React","Component","SimpleStorageContract","getWeb3","App","state","storageValue","web3","accounts","contract","newValue","componentDidMount","handleChange","bind","handleSubmit","eth","getAccounts","console","log","net","getId","networkId","deployedNetwork","networks","instance","Contract","abi","address","setState","runExample","alert","error","methods","get","call","response","event","target","value","preventDefault","set","send","from"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport SimpleStorageContract from \"./contracts/SimpleStorage.json\";\nimport getWeb3 from \"./utils/getWeb3\";\n\n\nimport \"./App.css\";\n\nclass App extends Component {\n  state = { storageValue: \"\", web3: null, accounts: null, contract: null, newValue: \"\" };\n\n  componentDidMount = async () => {\n    try {\n      this.handleChange = this.handleChange.bind(this);\n      this.handleChange = this.handleSubmit.bind(this);\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n      console.log(accounts);\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      console.log(networkId);\n      const deployedNetwork = SimpleStorageContract.networks[networkId];\n      console.log(deployedNetwork);\n      const instance = new web3.eth.Contract(\n        SimpleStorageContract.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ web3, accounts, contract: instance }, this.runExample);\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n\n  runExample = async () => {\n    const { contract } = this.state;\n\n    // Get the value from the contract to prove it worked.\n    const response = await contract.methods.get().call();\n\n    // Update state with the result.\n    this.setState({ storageValue: response });\n  };\n\n  handleChange(event){\n    //console.log(this.state.newValue);\n    this.setState({newValue: event.target.value});\n  }\n\n  async handleSubmit(event){\n    event.preventDefault();\n\n    const { accounts, contract } = this.state;\n    await contract.methods.set(this.state.newValue).send({ from: accounts[0] });\n    //  await contract.methods.set(82).send({ from: accounts[0] });\n    const response = await contract.methods.get().call();\n    this.setState({storageValue: response});\n  }\n\n  render() {\n    console.log(this.state);\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    return (\n      <div className=\"App\">\n        <h1>Do this Dapp!</h1>\n        <div>The stored value is: {this.state.storageValue}</div>\n        <form onSubmit={this.handleSubmit}>\n          <label>\n          New Value: \n          <input type=\"text\" value={this.state.newValue} onChange={this.handleChange} />\n          </label>\n          <input type=\"submit\" value=\"Submit\" />\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default App;\n/*\nclass App extends Component {\n  state = { storageValue: 0, web3: null, accounts: null, contract: null };\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n      console.log(accounts);\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      console.log(networkId);\n      const deployedNetwork = SimpleStorageContract.networks[networkId];\n      console.log(deployedNetwork);\n      const instance = new web3.eth.Contract(\n        SimpleStorageContract.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ web3, accounts, contract: instance }, this.runExample);\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n\n  runExample = async () => {\n    const { accounts, contract } = this.state;\n\n    // Stores a given value, 5 by default.\n    await contract.methods.set(82).send({ from: accounts[0] });\n\n    // Get the value from the contract to prove it worked.\n    const response = await contract.methods.get().call();\n\n    // Update state with the result.\n    this.setState({ storageValue: response });\n  };\n\n  render() {\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    return (\n      <div className=\"App\">\n        <h1>Good to Go!</h1>\n        <p>Your Truffle Box is installed and ready.</p>\n        <h2>Smart Contract Example</h2>\n        <p>\n          If your contracts compiled and migrated successfully, below will show\n          a stored value of 5 (by default).\n        </p>\n        <p>\n          Try changing the value stored on <strong>line 40</strong> of App.js.\n        </p>\n        <div>The stored value is: {this.state.storageValue}</div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n*/\n\n"]},"metadata":{},"sourceType":"module"}
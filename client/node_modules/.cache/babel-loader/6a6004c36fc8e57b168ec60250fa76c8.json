{"ast":null,"code":"import _regeneratorRuntime from \"/Users/joe/Documents/truffle/projects/react-dapp/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/joe/Documents/truffle/projects/react-dapp/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport Web3 from \"web3\";\n\nvar getWeb3WS = function getWeb3WS() {\n  return new Promise(function (resolve, reject) {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    console.log(\"Enabling Infura Websocket\");\n    window.addEventListener(\"load2\",\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var web3WS, provider, web3, _provider, _web;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              // Modern dapp browsers pc based...\n              //console.log(\"Mobile?: \" + isMobile);\n              if (window.ethereum) {\n                web3WS = new Web3.providers.WebsocketProvider(\"wss://rinkeby.infura.io/ws/v3/db7a4bd577ba4c7ab8593520c14d59c4\");\n                console.log(\"Websocket Enabled.\"); // Acccounts now exposed\n\n                resolve(web3WS);\n                reject(console.log(\"ERROR\"));\n              } // Legacy dapp browsers...\n              else if (window.web3) {\n                  /* // Use websockets provider.\n                   const web3 = window.web3;\n                   console.log(\"Injected web3 detected.\");\n                   resolve(web3);\n                   */\n                  provider = new Web3.providers.WebsocketProvider( //\"http://127.0.0.1:9545\"\n                  \"ws://127.0.0.1:8545\", {\n                    headers: {\n                      Origin: \"forWebSocket\"\n                    }\n                  });\n                  web3 = new Web3(provider);\n                  console.log(\"No web3 instance injected, using Local web3.\");\n                  resolve(web3);\n                } // Fallback to localhost; use dev console port by default...\n                else {\n                    //const provider = new Web3.providers.HttpProvider(\n                    _provider = new Web3.providers.WebsocketProvider(\"ws://127.0.0.1:8545\" //\"http://127.0.0.1:9545\"\n                    , {\n                      headers: {\n                        Origin: \"forWebSocket\"\n                      }\n                    });\n                    _web = new Web3(_provider);\n                    console.log(\"No web3 instance injected, using Local web3.\");\n                    resolve(_web);\n                  }\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    })));\n  });\n};\n\nexport default getWeb3WS;","map":{"version":3,"sources":["/Users/joe/Documents/truffle/projects/react-dapp/client/src/utils/getWeb3WS.js"],"names":["Web3","getWeb3WS","Promise","resolve","reject","console","log","window","addEventListener","ethereum","web3WS","providers","WebsocketProvider","web3","provider","headers","Origin"],"mappings":";;AAAA,OAAOA,IAAP,MAAiB,MAAjB;;AAGE,IAAMC,SAAS,GAAG,SAAZA,SAAY;AAAA,SAClB,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC/B;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ;AACAC,IAAAA,MAAM,CAACC,gBAAP,CAAwB,OAAxB;AAAA;AAAA;AAAA;AAAA,6BAAiC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAC/B;AACA;AACA,kBAAID,MAAM,CAACE,QAAX,EAAqB;AACbC,gBAAAA,MADa,GACJ,IAAIV,IAAI,CAACW,SAAL,CAAeC,iBAAnB,CAAqC,gEAArC,CADI;AAIjBP,gBAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAJiB,CAKjB;;AACAH,gBAAAA,OAAO,CAACO,MAAD,CAAP;AACAN,gBAAAA,MAAM,CAACC,OAAO,CAACC,GAAR,CAAY,OAAZ,CAAD,CAAN;AAEH,eATD,CAUA;AAVA,mBAWK,IAAIC,MAAM,CAACM,IAAX,EAAiB;AACrB;;;;;AAKMC,kBAAAA,QANe,GAMJ,IAAId,IAAI,CAACW,SAAL,CAAeC,iBAAnB,EACd;AACA,uCAFc,EAEQ;AACpBG,oBAAAA,OAAO,EAAE;AACPC,sBAAAA,MAAM,EAAE;AADD;AADW,mBAFR,CANI;AAcdH,kBAAAA,IAdc,GAcP,IAAIb,IAAJ,CAASc,QAAT,CAdO;AAepBT,kBAAAA,OAAO,CAACC,GAAR,CAAY,8CAAZ;AACAH,kBAAAA,OAAO,CAACU,IAAD,CAAP;AACD,iBAjBI,CAkBL;AAlBK,qBAmBA;AACH;AACMC,oBAAAA,SAFH,GAEc,IAAId,IAAI,CAACW,SAAL,CAAeC,iBAAnB,CACf,qBADe,CAEf;AAFe,sBAGd;AACCG,sBAAAA,OAAO,EAAE;AACPC,wBAAAA,MAAM,EAAE;AADD;AADV,qBAHc,CAFd;AAWGH,oBAAAA,IAXH,GAWU,IAAIb,IAAJ,CAASc,SAAT,CAXV;AAYHT,oBAAAA,OAAO,CAACC,GAAR,CAAY,8CAAZ;AACAH,oBAAAA,OAAO,CAACU,IAAD,CAAP;AACD;;AA/C8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAjC;AAiDD,GApDD,CADkB;AAAA,CAAlB;;AAuDF,eAAeZ,SAAf","sourcesContent":["import Web3 from \"web3\";\n\n\n  const getWeb3WS = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    console.log(\"Enabling Infura Websocket\");\n    window.addEventListener(\"load2\", async () => {\n      // Modern dapp browsers pc based...\n      //console.log(\"Mobile?: \" + isMobile);\n      if (window.ethereum) {\n        const web3WS = new Web3.providers.WebsocketProvider(\"wss://rinkeby.infura.io/ws/v3/db7a4bd577ba4c7ab8593520c14d59c4\");\n       \n          \n          console.log(\"Websocket Enabled.\");\n          // Acccounts now exposed\n          resolve(web3WS);\n          reject(console.log(\"ERROR\"));\n\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n       /* // Use websockets provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n        */\n       const provider = new Web3.providers.WebsocketProvider(\n          //\"http://127.0.0.1:9545\"\n          \"ws://127.0.0.1:8545\",{\n            headers: {\n              Origin: \"forWebSocket\"\n            }\n          }\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        //const provider = new Web3.providers.HttpProvider(\n        const provider = new Web3.providers.WebsocketProvider(\n          \"ws://127.0.0.1:8545\"\n          //\"http://127.0.0.1:9545\"\n          ,{\n            headers: {\n              Origin: \"forWebSocket\"\n            }\n          }\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3WS\n\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _regeneratorRuntime from \"/Users/joe/Documents/truffle/projects/react-dapp/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/joe/Documents/truffle/projects/react-dapp/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/joe/Documents/truffle/projects/react-dapp/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/joe/Documents/truffle/projects/react-dapp/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/joe/Documents/truffle/projects/react-dapp/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/joe/Documents/truffle/projects/react-dapp/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/joe/Documents/truffle/projects/react-dapp/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/joe/Documents/truffle/projects/react-dapp/client/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/joe/Documents/truffle/projects/react-dapp/client/src/App.js\";\nimport React, { Component } from \"react\"; //import SimpleStorageContract from \"../../build/contracts/SimpleStorage.json\"; investigate build directory\n\nimport SimpleStorageContract from \"./contracts/SimpleStorage.json\";\nimport getWeb3 from \"./utils/getWeb3\";\nimport \"./App.css\";\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      storageValue: \"\",\n      web3: null,\n      accounts: null,\n      contract: null,\n      newValue: \"\",\n      loading: \"\"\n    };\n    _this.componentDidMount =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var web3, accounts, networkId, deployedNetwork, instance;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n              _this.handleSubmit = _this.handleSubmit.bind(_assertThisInitialized(_assertThisInitialized(_this))); // Get network provider and web3 instance.\n\n              _context.next = 5;\n              return getWeb3();\n\n            case 5:\n              web3 = _context.sent;\n              _context.next = 8;\n              return web3.eth.getAccounts();\n\n            case 8:\n              accounts = _context.sent;\n              //the active account in metamask\n              console.log(\"accounts: \" + accounts); // Get the contract instance.\n\n              _context.next = 12;\n              return web3.eth.net.getId();\n\n            case 12:\n              networkId = _context.sent;\n              console.log(\"NetworkID: \" + networkId);\n              deployedNetwork = SimpleStorageContract.networks[networkId];\n              console.log(\"deployedNetwork: \" + deployedNetwork);\n              instance = new web3.eth.Contract(SimpleStorageContract.abi, deployedNetwork && deployedNetwork.address);\n              console.log(\"SimpleStorageContract.abi: \" + SimpleStorageContract.abi); //console.log(\"deployedNetwork and address: \" + deployedNetwork && deployedNetwork.address);\n\n              console.log(instance); // Set web3, accounts, and contract to the state, and then proceed with an\n              // example of interacting with the contract's methods.\n\n              _this.setState({\n                web3: web3,\n                accounts: accounts,\n                contract: instance\n              }, _this.runExample);\n\n              _context.next = 26;\n              break;\n\n            case 22:\n              _context.prev = 22;\n              _context.t0 = _context[\"catch\"](0);\n              // Catch any errors for any of the above operations.\n              alert(\"Failed to load web3, accounts, or contract. Check console for details.\");\n              console.error(_context.t0);\n\n            case 26:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this, [[0, 22]]);\n    }));\n    _this.runExample =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2() {\n      var contract, response;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              contract = _this.state.contract; // Get the value from the contract to prove it worked.\n\n              _context2.next = 3;\n              return contract.methods.get().call();\n\n            case 3:\n              response = _context2.sent;\n              console.log(response); // Update state with the result.\n\n              _this.setState({\n                storageValue: response\n              });\n\n            case 6:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"handleChange\",\n    value: function handleChange(event) {\n      //console.log(this.state.newValue);\n      this.setState({\n        newValue: event.target.value\n      });\n    }\n  }, {\n    key: \"handleSubmit\",\n    value: function () {\n      var _handleSubmit = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(event) {\n        var _this$state, accounts, contract, receipt, response;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                /* TESTING\n                alert('A name was submitted: ' + this.state.newValue);\n                event.preventDefault();\n                this.setState({newValue: \"\"});\n                */\n                event.preventDefault();\n                _this$state = this.state, accounts = _this$state.accounts, contract = _this$state.contract;\n                console.log(\"save account[0]:\" + {\n                  from: accounts[0]\n                });\n                this.setState({\n                  loading: true\n                });\n                _context3.next = 6;\n                return contract.methods.set(this.state.newValue).send({\n                  from: accounts[0]\n                });\n\n              case 6:\n                receipt = _context3.sent;\n                _context3.next = 9;\n                return contract.methods.get().call();\n\n              case 9:\n                response = _context3.sent;\n                console.log(\"save response:\" + response);\n                this.setState({\n                  storageValue: response,\n                  newValue: \"\",\n                  loading: false\n                }); //this.setState({storageValue: response});\n                // reset the text box variable\n                //this.setState({newValue: \"\"});\n\n              case 12:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function handleSubmit(_x) {\n        return _handleSubmit.apply(this, arguments);\n      };\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      console.log(this.state);\n\n      if (!this.state.web3) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 87\n          },\n          __self: this\n        }, \"Loading Web3, accounts, and contract...\");\n      }\n\n      if (!this.state.loading) {\n        return (\n          /*\n          <form onSubmit={this.handleSubmit}>\n              <label>\n              New Value: \n              <input type=\"text\" value={this.state.newValue} onChange={this.handleChange} />\n              </label>\n              <input type=\"submit\" value=\"Submit\" />\n          </form>\n          */\n          React.createElement(\"div\", {\n            className: \"App\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 101\n            },\n            __self: this\n          }, React.createElement(\"h1\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 102\n            },\n            __self: this\n          }, \"Do this Dapp!\"), React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 103\n            },\n            __self: this\n          }, \"The stored value is: \", this.state.storageValue), React.createElement(\"form\", {\n            onSubmit: this.handleSubmit,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 104\n            },\n            __self: this\n          }, React.createElement(\"label\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 105\n            },\n            __self: this\n          }, \"New Value:\", React.createElement(\"input\", {\n            type: \"text\",\n            value: this.state.newValue,\n            onChange: this.handleChange,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 107\n            },\n            __self: this\n          })), React.createElement(\"input\", {\n            type: \"submit\",\n            value: \"Submit\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 109\n            },\n            __self: this\n          })))\n        );\n      }\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;\n/*\nclass App extends Component {\n  state = { storageValue: 0, web3: null, accounts: null, contract: null };\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n      console.log(accounts);\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      console.log(networkId);\n      const deployedNetwork = SimpleStorageContract.networks[networkId];\n      console.log(deployedNetwork);\n      const instance = new web3.eth.Contract(\n        SimpleStorageContract.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ web3, accounts, contract: instance }, this.runExample);\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n\n  runExample = async () => {\n    const { accounts, contract } = this.state;\n\n    // Stores a given value, 5 by default.\n    await contract.methods.set(82).send({ from: accounts[0] });\n\n    // Get the value from the contract to prove it worked.\n    const response = await contract.methods.get().call();\n\n    // Update state with the result.\n    this.setState({ storageValue: response });\n  };\n\n  render() {\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    return (\n      <div className=\"App\">\n        <h1>Good to Go!</h1>\n        <p>Your Truffle Box is installed and ready.</p>\n        <h2>Smart Contract Example</h2>\n        <p>\n          If your contracts compiled and migrated successfully, below will show\n          a stored value of 5 (by default).\n        </p>\n        <p>\n          Try changing the value stored on <strong>line 40</strong> of App.js.\n        </p>\n        <div>The stored value is: {this.state.storageValue}</div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n*/","map":{"version":3,"sources":["/Users/joe/Documents/truffle/projects/react-dapp/client/src/App.js"],"names":["React","Component","SimpleStorageContract","getWeb3","App","state","storageValue","web3","accounts","contract","newValue","loading","componentDidMount","handleChange","bind","handleSubmit","eth","getAccounts","console","log","net","getId","networkId","deployedNetwork","networks","instance","Contract","abi","address","setState","runExample","alert","error","methods","get","call","response","event","target","value","preventDefault","from","set","send","receipt"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n//import SimpleStorageContract from \"../../build/contracts/SimpleStorage.json\"; investigate build directory\nimport SimpleStorageContract from \"./contracts/SimpleStorage.json\"; \nimport getWeb3 from \"./utils/getWeb3\";\n\n\nimport \"./App.css\";\n\nclass App extends Component {\n  state = { storageValue: \"\", web3: null, accounts: null, contract: null, newValue: \"\", loading: \"\" };\n  //state = { storageValue: \"\", web3: null, accounts: null, contract: null, newValue: \"\" };\n\n  componentDidMount = async () => {\n    try {\n      this.handleChange = this.handleChange.bind(this);\n      this.handleSubmit = this.handleSubmit.bind(this);\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts(); //the active account in metamask\n      console.log(\"accounts: \" + accounts);\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      console.log(\"NetworkID: \" + networkId);\n      const deployedNetwork = SimpleStorageContract.networks[networkId];\n      console.log(\"deployedNetwork: \" + deployedNetwork);\n      const instance = new web3.eth.Contract(\n        SimpleStorageContract.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n      console.log(\"SimpleStorageContract.abi: \" + SimpleStorageContract.abi);\n      //console.log(\"deployedNetwork and address: \" + deployedNetwork && deployedNetwork.address);\n      console.log(instance);\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ web3, accounts, contract: instance }, this.runExample);\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n\n  runExample = async () => {\n    const { contract } = this.state;\n\n    // Get the value from the contract to prove it worked.\n    const response = await contract.methods.get().call();\n    console.log(response);\n\n    // Update state with the result.\n    this.setState({ storageValue: response });\n  };\n\n  handleChange(event) {\n    //console.log(this.state.newValue);\n    this.setState({newValue: event.target.value});\n  }\n\n  async handleSubmit(event){ \n    /* TESTING\n    alert('A name was submitted: ' + this.state.newValue);\n    event.preventDefault();\n    this.setState({newValue: \"\"});\n    */\n   \n    event.preventDefault();\n    const { accounts, contract } = this.state;\n    console.log(\"save account[0]:\" + {from: accounts[0]});\n\n    this.setState({ loading: true });\n    const receipt = await contract.methods.set(this.state.newValue).send({ from: accounts[0] });\n    const response = await contract.methods.get().call();\n    console.log(\"save response:\" + response);\n    this.setState({storageValue: response, newValue: \"\", loading: false });\n    //this.setState({storageValue: response});\n    // reset the text box variable\n    //this.setState({newValue: \"\"});\n  }\n\n  render() {\n    console.log(this.state);\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n\n    if (!this.state.loading) {\n      return (\n        /*\n        <form onSubmit={this.handleSubmit}>\n            <label>\n            New Value: \n            <input type=\"text\" value={this.state.newValue} onChange={this.handleChange} />\n            </label>\n            <input type=\"submit\" value=\"Submit\" />\n        </form>\n        */\n        <div className=\"App\">\n          <h1>Do this Dapp!</h1>\n          <div>The stored value is: {this.state.storageValue}</div>\n          <form onSubmit={this.handleSubmit}>\n            <label>\n            New Value: \n            <input type=\"text\" value={this.state.newValue} onChange={this.handleChange} />\n            </label>\n            <input type=\"submit\" value=\"Submit\" />\n          </form>\n        </div>\n      );\n    }\n  }\n}\n\nexport default App;\n/*\nclass App extends Component {\n  state = { storageValue: 0, web3: null, accounts: null, contract: null };\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n      console.log(accounts);\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      console.log(networkId);\n      const deployedNetwork = SimpleStorageContract.networks[networkId];\n      console.log(deployedNetwork);\n      const instance = new web3.eth.Contract(\n        SimpleStorageContract.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ web3, accounts, contract: instance }, this.runExample);\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n\n  runExample = async () => {\n    const { accounts, contract } = this.state;\n\n    // Stores a given value, 5 by default.\n    await contract.methods.set(82).send({ from: accounts[0] });\n\n    // Get the value from the contract to prove it worked.\n    const response = await contract.methods.get().call();\n\n    // Update state with the result.\n    this.setState({ storageValue: response });\n  };\n\n  render() {\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    return (\n      <div className=\"App\">\n        <h1>Good to Go!</h1>\n        <p>Your Truffle Box is installed and ready.</p>\n        <h2>Smart Contract Example</h2>\n        <p>\n          If your contracts compiled and migrated successfully, below will show\n          a stored value of 5 (by default).\n        </p>\n        <p>\n          Try changing the value stored on <strong>line 40</strong> of App.js.\n        </p>\n        <div>The stored value is: {this.state.storageValue}</div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n*/\n\n"]},"metadata":{},"sourceType":"module"}
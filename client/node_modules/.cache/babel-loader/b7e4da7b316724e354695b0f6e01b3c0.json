{"ast":null,"code":"import _regeneratorRuntime from \"/Users/joe/Documents/truffle/projects/react-dapp/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/joe/Documents/truffle/projects/react-dapp/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport Web3 from \"web3\";\n\nvar getWeb3WS = function getWeb3WS() {\n  return new Promise(function (resolve, reject) {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\",\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var web3WS, provider, web3, _provider, _web;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              console.log(\"Enabling Infura Websocket\"); // Modern dapp browsers pc based...\n              //console.log(\"Mobile?: \" + isMobile);\n\n              if (!window.ethereum) {\n                _context.next = 15;\n                break;\n              }\n\n              web3WS = new Web3.providers.WebsocketProvider(\"wss://rinkeby.infura.io/ws/v3/db7a4bd577ba4c7ab8593520c14d59c4\");\n              _context.prev = 3;\n              _context.next = 6;\n              return window.ethereum.enable();\n\n            case 6:\n              console.log(\"Websocket Enabled.\"); // Acccounts now exposed\n\n              resolve(web3WS);\n              _context.next = 13;\n              break;\n\n            case 10:\n              _context.prev = 10;\n              _context.t0 = _context[\"catch\"](3);\n              reject(_context.t0);\n\n            case 13:\n              _context.next = 16;\n              break;\n\n            case 15:\n              // Legacy dapp browsers...\n              if (window.web3) {\n                /* // Use websockets provider.\n                 const web3 = window.web3;\n                 console.log(\"Injected web3 detected.\");\n                 resolve(web3);\n                 */\n                provider = new Web3.providers.WebsocketProvider( //\"http://127.0.0.1:9545\"\n                \"ws://127.0.0.1:8545\", {\n                  headers: {\n                    Origin: \"forWebSocket\"\n                  }\n                });\n                web3 = new Web3(provider);\n                console.log(\"No web3 instance injected, using Local web3.\");\n                resolve(web3);\n              } // Fallback to localhost; use dev console port by default...\n              else {\n                  //const provider = new Web3.providers.HttpProvider(\n                  _provider = new Web3.providers.WebsocketProvider(\"ws://127.0.0.1:8545\" //\"http://127.0.0.1:9545\"\n                  , {\n                    headers: {\n                      Origin: \"forWebSocket\"\n                    }\n                  });\n                  _web = new Web3(_provider);\n                  console.log(\"No web3 instance injected, using Local web3.\");\n                  resolve(_web);\n                }\n\n            case 16:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this, [[3, 10]]);\n    })));\n  });\n};\n\nexport default getWeb3WS;","map":{"version":3,"sources":["/Users/joe/Documents/truffle/projects/react-dapp/client/src/utils/getWeb3WS.js"],"names":["Web3","getWeb3WS","Promise","resolve","reject","window","addEventListener","console","log","ethereum","web3WS","providers","WebsocketProvider","enable","web3","provider","headers","Origin"],"mappings":";;AAAA,OAAOA,IAAP,MAAiB,MAAjB;;AAGE,IAAMC,SAAS,GAAG,SAAZA,SAAY;AAAA,SAClB,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC/B;AAEAC,IAAAA,MAAM,CAACC,gBAAP,CAAwB,MAAxB;AAAA;AAAA;AAAA;AAAA,6BAAgC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAC5BC,cAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ,EAD4B,CAE9B;AACA;;AAH8B,mBAI1BH,MAAM,CAACI,QAJmB;AAAA;AAAA;AAAA;;AAKtBC,cAAAA,MALsB,GAKb,IAAIV,IAAI,CAACW,SAAL,CAAeC,iBAAnB,CAAqC,gEAArC,CALa;AAAA;AAAA;AAAA,qBAQpBP,MAAM,CAACI,QAAP,CAAgBI,MAAhB,EARoB;;AAAA;AAU1BN,cAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAV0B,CAW1B;;AACAL,cAAAA,OAAO,CAACO,MAAD,CAAP;AAZ0B;AAAA;;AAAA;AAAA;AAAA;AAc1BN,cAAAA,MAAM,aAAN;;AAd0B;AAAA;AAAA;;AAAA;AAiB9B;AACK,kBAAIC,MAAM,CAACS,IAAX,EAAiB;AACrB;;;;;AAKMC,gBAAAA,QANe,GAMJ,IAAIf,IAAI,CAACW,SAAL,CAAeC,iBAAnB,EACd;AACA,qCAFc,EAEQ;AACpBI,kBAAAA,OAAO,EAAE;AACPC,oBAAAA,MAAM,EAAE;AADD;AADW,iBAFR,CANI;AAcdH,gBAAAA,IAdc,GAcP,IAAId,IAAJ,CAASe,QAAT,CAdO;AAepBR,gBAAAA,OAAO,CAACC,GAAR,CAAY,8CAAZ;AACAL,gBAAAA,OAAO,CAACW,IAAD,CAAP;AACD,eAjBI,CAkBL;AAlBK,mBAmBA;AACH;AACMC,kBAAAA,SAFH,GAEc,IAAIf,IAAI,CAACW,SAAL,CAAeC,iBAAnB,CACf,qBADe,CAEf;AAFe,oBAGd;AACCI,oBAAAA,OAAO,EAAE;AACPC,sBAAAA,MAAM,EAAE;AADD;AADV,mBAHc,CAFd;AAWGH,kBAAAA,IAXH,GAWU,IAAId,IAAJ,CAASe,SAAT,CAXV;AAYHR,kBAAAA,OAAO,CAACC,GAAR,CAAY,8CAAZ;AACAL,kBAAAA,OAAO,CAACW,IAAD,CAAP;AACD;;AAnD6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAhC;AAqDD,GAxDD,CADkB;AAAA,CAAlB;;AA2DF,eAAeb,SAAf","sourcesContent":["import Web3 from \"web3\";\n\n\n  const getWeb3WS = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n\n    window.addEventListener(\"load\", async () => {\n        console.log(\"Enabling Infura Websocket\");\n      // Modern dapp browsers pc based...\n      //console.log(\"Mobile?: \" + isMobile);\n      if (window.ethereum) {\n        const web3WS = new Web3.providers.WebsocketProvider(\"wss://rinkeby.infura.io/ws/v3/db7a4bd577ba4c7ab8593520c14d59c4\");\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          \n          console.log(\"Websocket Enabled.\");\n          // Acccounts now exposed\n          resolve(web3WS);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n       /* // Use websockets provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n        */\n       const provider = new Web3.providers.WebsocketProvider(\n          //\"http://127.0.0.1:9545\"\n          \"ws://127.0.0.1:8545\",{\n            headers: {\n              Origin: \"forWebSocket\"\n            }\n          }\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        //const provider = new Web3.providers.HttpProvider(\n        const provider = new Web3.providers.WebsocketProvider(\n          \"ws://127.0.0.1:8545\"\n          //\"http://127.0.0.1:9545\"\n          ,{\n            headers: {\n              Origin: \"forWebSocket\"\n            }\n          }\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3WS\n\n"]},"metadata":{},"sourceType":"module"}
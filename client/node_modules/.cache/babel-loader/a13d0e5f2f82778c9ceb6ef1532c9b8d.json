{"ast":null,"code":"import _regeneratorRuntime from \"/Users/joe/Documents/truffle/projects/react-dapp/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/joe/Documents/truffle/projects/react-dapp/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport Web3 from \"web3\";\n\nvar getWeb3 = function getWeb3() {\n  return new Promise(function (resolve, reject) {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\",\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var web3, provider, _web, _provider, _web2;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!window.ethereum) {\n                _context.next = 15;\n                break;\n              }\n\n              web3 = new Web3(window.ethereum);\n              _context.prev = 2;\n              _context.next = 5;\n              return window.ethereum.enable();\n\n            case 5:\n              console.log(\"The Window is: \" + window.ethereum);\n              console.log(\"Modern Web3 detected.\"); // Acccounts now exposed\n\n              resolve(web3);\n              _context.next = 13;\n              break;\n\n            case 10:\n              _context.prev = 10;\n              _context.t0 = _context[\"catch\"](2);\n              reject(_context.t0);\n\n            case 13:\n              _context.next = 16;\n              break;\n\n            case 15:\n              // Legacy dapp browsers...\n              if (window.web3) {\n                /* // Use Mist/MetaMask's provider.\n                 const web3 = window.web3;\n                 console.log(\"Injected web3 detected.\");\n                 resolve(web3);\n                 */\n                provider = new Web3.providers.WebsocketProvider( //\"http://127.0.0.1:9545\"\n                \"ws://127.0.0.1:8546\", {\n                  headers: {\n                    Origin: \"forWebSocket\"\n                  }\n                });\n                _web = new Web3(provider);\n                console.log(\"No web3 instance injected, using Local web3.\");\n                resolve(_web);\n              } // Fallback to localhost; use dev console port by default...\n              else {\n                  //const provider = new Web3.providers.HttpProvider(\n                  _provider = new Web3.providers.WebsocketProvider(\"ws://127.0.0.1:8546\" //\"http://127.0.0.1:9545\"\n                  , {\n                    headers: {\n                      Origin: \"forWebSocket\"\n                    }\n                  });\n                  _web2 = new Web3(_provider);\n                  console.log(\"No web3 instance injected, using Local web3.\");\n                  resolve(_web2);\n                }\n\n            case 16:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this, [[2, 10]]);\n    })));\n  });\n};\n\nexport default getWeb3;","map":{"version":3,"sources":["/Users/joe/Documents/truffle/projects/react-dapp/client/src/utils/getWeb3.js"],"names":["Web3","getWeb3","Promise","resolve","reject","window","addEventListener","ethereum","web3","enable","console","log","provider","providers","WebsocketProvider","headers","Origin"],"mappings":";;AAAA,OAAOA,IAAP,MAAiB,MAAjB;;AAEA,IAAMC,OAAO,GAAG,SAAVA,OAAU;AAAA,SACd,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC/B;AACAC,IAAAA,MAAM,CAACC,gBAAP,CAAwB,MAAxB;AAAA;AAAA;AAAA;AAAA,6BAAgC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,mBAE1BD,MAAM,CAACE,QAFmB;AAAA;AAAA;AAAA;;AAGtBC,cAAAA,IAHsB,GAGf,IAAIR,IAAJ,CAASK,MAAM,CAACE,QAAhB,CAHe;AAAA;AAAA;AAAA,qBAMpBF,MAAM,CAACE,QAAP,CAAgBE,MAAhB,EANoB;;AAAA;AAO1BC,cAAAA,OAAO,CAACC,GAAR,CAAY,oBAAoBN,MAAM,CAACE,QAAvC;AACAG,cAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAR0B,CAS1B;;AACAR,cAAAA,OAAO,CAACK,IAAD,CAAP;AAV0B;AAAA;;AAAA;AAAA;AAAA;AAY1BJ,cAAAA,MAAM,aAAN;;AAZ0B;AAAA;AAAA;;AAAA;AAe9B;AACK,kBAAIC,MAAM,CAACG,IAAX,EAAiB;AACrB;;;;;AAKMI,gBAAAA,QANe,GAMJ,IAAIZ,IAAI,CAACa,SAAL,CAAeC,iBAAnB,EACd;AACA,qCAFc,EAEQ;AACpBC,kBAAAA,OAAO,EAAE;AACPC,oBAAAA,MAAM,EAAE;AADD;AADW,iBAFR,CANI;AAcdR,gBAAAA,IAdc,GAcP,IAAIR,IAAJ,CAASY,QAAT,CAdO;AAepBF,gBAAAA,OAAO,CAACC,GAAR,CAAY,8CAAZ;AACAR,gBAAAA,OAAO,CAACK,IAAD,CAAP;AACD,eAjBI,CAkBL;AAlBK,mBAmBA;AACH;AACMI,kBAAAA,SAFH,GAEc,IAAIZ,IAAI,CAACa,SAAL,CAAeC,iBAAnB,CACf,qBADe,CAEf;AAFe,oBAGd;AACCC,oBAAAA,OAAO,EAAE;AACPC,sBAAAA,MAAM,EAAE;AADD;AADV,mBAHc,CAFd;AAWGR,kBAAAA,KAXH,GAWU,IAAIR,IAAJ,CAASY,SAAT,CAXV;AAYHF,kBAAAA,OAAO,CAACC,GAAR,CAAY,8CAAZ;AACAR,kBAAAA,OAAO,CAACK,KAAD,CAAP;AACD;;AAjD6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAhC;AAmDD,GArDD,CADc;AAAA,CAAhB;;AAwDA,eAAeP,OAAf","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          console.log(\"The Window is: \" + window.ethereum);\n          console.log(\"Modern Web3 detected.\");\n          // Acccounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n       /* // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n        */\n       const provider = new Web3.providers.WebsocketProvider(\n          //\"http://127.0.0.1:9545\"\n          \"ws://127.0.0.1:8546\",{\n            headers: {\n              Origin: \"forWebSocket\"\n            }\n          }\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        //const provider = new Web3.providers.HttpProvider(\n        const provider = new Web3.providers.WebsocketProvider(\n          \"ws://127.0.0.1:8546\"\n          //\"http://127.0.0.1:9545\"\n          ,{\n            headers: {\n              Origin: \"forWebSocket\"\n            }\n          }\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _regeneratorRuntime from \"/Users/joe/Documents/truffle/projects/react-dapp/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/joe/Documents/truffle/projects/react-dapp/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _assertThisInitialized from \"/Users/joe/Documents/truffle/projects/react-dapp/client/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _classCallCheck from \"/Users/joe/Documents/truffle/projects/react-dapp/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/joe/Documents/truffle/projects/react-dapp/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/joe/Documents/truffle/projects/react-dapp/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/joe/Documents/truffle/projects/react-dapp/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/joe/Documents/truffle/projects/react-dapp/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/joe/Documents/truffle/projects/react-dapp/client/src/App.js\";\nimport React, { Component } from \"react\"; //import SimpleStorageContract from \"../../build/contracts/SimpleStorage.json\"; investigate build directory\n\nimport SimpleStorageContract from \"./contracts/SimpleStorage.json\";\nimport getWeb3 from \"./utils/getWeb3\";\nimport detectMob from \"./utils/getWeb3\";\nimport \"./App.css\";\n\nvar Clock =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Clock, _Component);\n\n  function Clock(props) {\n    var _this;\n\n    _classCallCheck(this, Clock);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Clock).call(this, props));\n    _this.state = {\n      date: new Date()\n    };\n    return _this;\n  }\n\n  _createClass(Clock, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.timerID = setInterval(function () {\n        return _this2.tick();\n      }, 1000);\n    }\n  }, {\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      clearInterval(this.timerID);\n    }\n  }, {\n    key: \"tick\",\n    value: function tick() {\n      this.setState({\n        date: new Date()\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33\n        },\n        __self: this\n      }, \"The local tim is \", this.state.date.toLocaleTimeString()));\n    }\n  }]);\n\n  return Clock;\n}(Component);\n\nvar App =\n/*#__PURE__*/\nfunction (_Component2) {\n  _inherits(App, _Component2);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this3;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this3 = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this3.state = {\n      storageValue: \"\",\n      web3: null,\n      accounts: null,\n      contract: null,\n      newValue: \"\",\n      loading: false,\n      isMobile: false\n    };\n    _this3.componentDidMount =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var web3, getMobile, accounts, networkId, deployedNetwork, instance;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return getWeb3();\n\n            case 3:\n              web3 = _context.sent;\n              _context.next = 6;\n              return detectMob();\n\n            case 6:\n              getMobile = _context.sent;\n              _this3.handleChange = _this3.handleChange.bind(_assertThisInitialized(_assertThisInitialized(_this3)));\n              _this3.handleSubmit = _this3.handleSubmit.bind(_assertThisInitialized(_assertThisInitialized(_this3))); //this.Set = this.Set.bind(this);\n              // Use web3 to get the user's accounts.\n\n              _context.next = 11;\n              return web3.eth.getAccounts();\n\n            case 11:\n              accounts = _context.sent;\n\n              //the active account in metamask\n              _this3.setState({\n                isMobile: getMobile\n              });\n\n              console.log(\"accounts: \" + accounts); // Get the contract instance.\n\n              _context.next = 16;\n              return web3.eth.net.getId();\n\n            case 16:\n              networkId = _context.sent;\n              console.log(\"NetworkID: \" + networkId);\n              deployedNetwork = SimpleStorageContract.networks[networkId];\n              console.log(\"deployedNetwork: \" + deployedNetwork);\n              instance = new web3.eth.Contract(SimpleStorageContract.abi, deployedNetwork && deployedNetwork.address);\n              console.log(\"SimpleStorageContract.abi: \" + SimpleStorageContract.abi); //console.log(\"deployedNetwork and address: \" + deployedNetwork && deployedNetwork.address);\n\n              console.log(instance); // Set web3, accounts, and contract to the state, and then proceed with an\n              // example of interacting with the contract's methods.\n\n              _this3.setState({\n                web3: web3,\n                accounts: accounts,\n                contract: instance\n              }, _this3.runExample);\n\n              _context.next = 30;\n              break;\n\n            case 26:\n              _context.prev = 26;\n              _context.t0 = _context[\"catch\"](0);\n              // Catch any errors for any of the above operations.\n              alert(\"Failed to load web3, accounts, or contract. Check console for details.\");\n              console.error(_context.t0);\n\n            case 30:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this, [[0, 26]]);\n    }));\n    _this3.runExample =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2() {\n      var contract, response;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              contract = _this3.state.contract; // Get the value from the contract to prove it worked.\n\n              _context2.next = 3;\n              return contract.methods.getValue().call();\n\n            case 3:\n              response = _context2.sent;\n              console.log(response); // Update state with the result.\n\n              _this3.setState({\n                storageValue: response\n              });\n\n            case 6:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n    return _this3;\n  }\n\n  _createClass(App, [{\n    key: \"handleChange\",\n    value: function handleChange(event) {\n      //console.log(this.state.newValue);\n      this.setState({\n        newValue: event.target.value\n      });\n    }\n  }, {\n    key: \"handleSubmit\",\n    value: function () {\n      var _handleSubmit = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(event) {\n        var _this4 = this;\n\n        var _this$state, accounts, contract;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                /* TESTING\n                alert('A name was submitted: ' + this.state.newValue);\n                event.preventDefault();\n                this.setState({newValue: \"\"});\n                */\n                event.preventDefault();\n                _this$state = this.state, accounts = _this$state.accounts, contract = _this$state.contract;\n                console.log(\"save account[0]:\" + {\n                  from: accounts[0]\n                });\n                this.setState({\n                  loading: true\n                });\n                console.log(\"onsave loading 1: \" + this.state.loading);\n                console.log(\"isMobile = \" + this.state.isMobile);\n                /*\n                const receipt = await contract.methods\n                  .set(this.state.newValue)\n                  .send({ from: accounts[0] }, (error, transactionHash) => {\n                    console.log('Hash Returned' + transactionHash)\n                  });\n                */\n\n                contract.events.setValueEvent( //https://github.com/trufflesuite/truffle/issues/1254\n                {}, {\n                  fromBlock: 0\n                }, function (error, response) {\n                  console.log(event);\n                }).on(\"data\", function (response) {\n                  console.log(\"The event value: \" + response.returnValues.value);\n\n                  _this4.setState({\n                    storageValue: response.returnValues.value,\n                    newValue: \"\",\n                    loading: false\n                  });\n                }).on(\"error\", console.error);\n                /*\n                //https://github.com/trufflesuite/truffle/issues/1254\n                const myevent = contract.events.setValueEvent (\n                  {},\n                  {\n                    fromBlock: 0,\n                    toBlock: 'latest'\n                  });\n                */\n\n                contract.methods.setValue(this.state.newValue).send({\n                  from: accounts[0]\n                });\n                /*\n                contract.methods\n                  .setValue(this.state.newValue)\n                  .send({ from: accounts[0] })\n                  .on(\"receipt\", receipt => {\n                    console.log(receipt.storedValue);\n                });\n                */\n\n                /* ORIGINAL CODE\n                    console.log(\"onsave loading 2: \" + this.state.loading);\n                \n                    const response = await contract.methods.getValue().call();\n                    console.log(\"save response:\" + response);\n                    this.setState({ storageValue: response, newValue: \"\", loading: false });\n                */\n                //this.setState({storageValue: response});\n                // reset the text box variable\n                //this.setState({newValue: \"\"});\n\n              case 8:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function handleSubmit(_x) {\n        return _handleSubmit.apply(this, arguments);\n      };\n    }()\n    /*\n    storedValueEvent() {\n      //https://github.com/trufflesuite/truffle/issues/1254\n      this.contract\n        .storedValue(\n          {},\n          {\n            fromBlock: 0\n          },\n          (error, event) => {\n            console.log(event);\n          }\n        )\n        .on(\"data\", event => {\n          this.setState({ loading: false });\n        })\n        .on(\"error\", console.error);\n    }\n    */\n\n    /*\n      storedValueEvent() {\n        this.contract.storedValue({}, {\n        fromBlock: 0,\n        toBlock: 'latest'\n        }).watch((error, event) => { \n          this.setState({ loading: false });\n        })\n      }\n      */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      console.log(\"render loading: \" + this.state.loading);\n\n      if (!this.state.web3) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 204\n          },\n          __self: this\n        }, \"Loading Web3, accounts, and contract...\");\n      } //\n\n\n      return (\n        /*\n          <form onSubmit={this.handleSubmit}>\n              <label>\n              New Value: \n              <input type=\"text\" value={this.state.newValue} onChange={this.handleChange} />\n              </label>\n              <input type=\"submit\" value=\"Submit\" />\n          </form>\n          */\n        React.createElement(\"div\", {\n          className: \"App\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 218\n          },\n          __self: this\n        }, React.createElement(\"h1\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 219\n          },\n          __self: this\n        }, \"Simple Dapp!\"), React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 220\n          },\n          __self: this\n        }, \"The stored value is: \", React.createElement(\"b\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 220\n          },\n          __self: this\n        }, this.state.storageValue)), React.createElement(\"form\", {\n          onSubmit: this.handleSubmit,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 221\n          },\n          __self: this\n        }, React.createElement(\"label\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 222\n          },\n          __self: this\n        }, \"New Value:\", React.createElement(\"input\", {\n          type: \"text\",\n          value: this.state.newValue,\n          onChange: this.handleChange,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 224\n          },\n          __self: this\n        })), React.createElement(\"input\", {\n          type: \"submit\",\n          value: \"Submit\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 230\n          },\n          __self: this\n        })), React.createElement(Clock, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 232\n          },\n          __self: this\n        }))\n      ); //}\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;\n/*\nclass App extends Component {\n  state = { storageValue: 0, web3: null, accounts: null, contract: null };\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n      console.log(accounts);\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      console.log(networkId);\n      const deployedNetwork = SimpleStorageContract.networks[networkId];\n      console.log(deployedNetwork);\n      const instance = new web3.eth.Contract(\n        SimpleStorageContract.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ web3, accounts, contract: instance }, this.runExample);\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n\n  runExample = async () => {\n    const { accounts, contract } = this.state;\n\n    // Stores a given value, 5 by default.\n    await contract.methods.set(82).send({ from: accounts[0] });\n\n    // Get the value from the contract to prove it worked.\n    const response = await contract.methods.get().call();\n\n    // Update state with the result.\n    this.setState({ storageValue: response });\n  };\n\n  render() {\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    return (\n      <div className=\"App\">\n        <h1>Good to Go!</h1>\n        <p>Your Truffle Box is installed and ready.</p>\n        <h2>Smart Contract Example</h2>\n        <p>\n          If your contracts compiled and migrated successfully, below will show\n          a stored value of 5 (by default).\n        </p>\n        <p>\n          Try changing the value stored on <strong>line 40</strong> of App.js.\n        </p>\n        <div>The stored value is: {this.state.storageValue}</div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n*/","map":{"version":3,"sources":["/Users/joe/Documents/truffle/projects/react-dapp/client/src/App.js"],"names":["React","Component","SimpleStorageContract","getWeb3","detectMob","Clock","props","state","date","Date","timerID","setInterval","tick","clearInterval","setState","toLocaleTimeString","App","storageValue","web3","accounts","contract","newValue","loading","isMobile","componentDidMount","getMobile","handleChange","bind","handleSubmit","eth","getAccounts","console","log","net","getId","networkId","deployedNetwork","networks","instance","Contract","abi","address","runExample","alert","error","methods","getValue","call","response","event","target","value","preventDefault","from","events","setValueEvent","fromBlock","on","returnValues","setValue","send"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC,C,CACA;;AACA,OAAOC,qBAAP,MAAkC,gCAAlC;AACA,OAAOC,OAAP,MAAoB,iBAApB;AACA,OAAOC,SAAP,MAAsB,iBAAtB;AAEA,OAAO,WAAP;;IAEMC,K;;;;;AACJ,iBAAYC,KAAZ,EAAkB;AAAA;;AAAA;;AAChB,+EAAMA,KAAN;AACA,UAAKC,KAAL,GAAY;AAACC,MAAAA,IAAI,EAAE,IAAIC,IAAJ;AAAP,KAAZ;AAFgB;AAGjB;;;;wCACmB;AAAA;;AAClB,WAAKC,OAAL,GAAeC,WAAW,CACxB;AAAA,eAAM,MAAI,CAACC,IAAL,EAAN;AAAA,OADwB,EAExB,IAFwB,CAA1B;AAID;;;yCACoB;AACnBC,MAAAA,aAAa,CAAC,KAAKH,OAAN,CAAb;AACD;;;2BAEM;AACL,WAAKI,QAAL,CAAc;AACZN,QAAAA,IAAI,EAAE,IAAIC,IAAJ;AADM,OAAd;AAGD;;;6BAEQ;AACP,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAAsB,KAAKF,KAAL,CAAWC,IAAX,CAAgBO,kBAAhB,EAAtB,CADF,CADF;AAKD;;;;EA3BiBd,S;;IA8Bde,G;;;;;;;;;;;;;;;;;WACJT,K,GAAQ;AACNU,MAAAA,YAAY,EAAE,EADR;AAENC,MAAAA,IAAI,EAAE,IAFA;AAGNC,MAAAA,QAAQ,EAAE,IAHJ;AAINC,MAAAA,QAAQ,EAAE,IAJJ;AAKNC,MAAAA,QAAQ,EAAE,EALJ;AAMNC,MAAAA,OAAO,EAAE,KANH;AAONC,MAAAA,QAAQ,EAAE;AAPJ,K;WAWRC,iB;;;;6BAAoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAGGrB,OAAO,EAHV;;AAAA;AAGVe,cAAAA,IAHU;AAAA;AAAA,qBAIQd,SAAS,EAJjB;;AAAA;AAIVqB,cAAAA,SAJU;AAKhB,qBAAKC,YAAL,GAAoB,OAAKA,YAAL,CAAkBC,IAAlB,wDAApB;AACA,qBAAKC,YAAL,GAAoB,OAAKA,YAAL,CAAkBD,IAAlB,wDAApB,CANgB,CAOhB;AAEA;;AATgB;AAAA,qBAUOT,IAAI,CAACW,GAAL,CAASC,WAAT,EAVP;;AAAA;AAUVX,cAAAA,QAVU;;AAU+B;AAC/C,qBAAKL,QAAL,CAAc;AAAES,gBAAAA,QAAQ,EAAEE;AAAZ,eAAd;;AACAM,cAAAA,OAAO,CAACC,GAAR,CAAY,eAAeb,QAA3B,EAZgB,CAahB;;AAbgB;AAAA,qBAcQD,IAAI,CAACW,GAAL,CAASI,GAAT,CAAaC,KAAb,EAdR;;AAAA;AAcVC,cAAAA,SAdU;AAehBJ,cAAAA,OAAO,CAACC,GAAR,CAAY,gBAAgBG,SAA5B;AACMC,cAAAA,eAhBU,GAgBQlC,qBAAqB,CAACmC,QAAtB,CAA+BF,SAA/B,CAhBR;AAiBhBJ,cAAAA,OAAO,CAACC,GAAR,CAAY,sBAAsBI,eAAlC;AACME,cAAAA,QAlBU,GAkBC,IAAIpB,IAAI,CAACW,GAAL,CAASU,QAAb,CACfrC,qBAAqB,CAACsC,GADP,EAEfJ,eAAe,IAAIA,eAAe,CAACK,OAFpB,CAlBD;AAsBhBV,cAAAA,OAAO,CAACC,GAAR,CAAY,gCAAgC9B,qBAAqB,CAACsC,GAAlE,EAtBgB,CAuBhB;;AACAT,cAAAA,OAAO,CAACC,GAAR,CAAYM,QAAZ,EAxBgB,CAyBhB;AACA;;AACA,qBAAKxB,QAAL,CAAc;AAAEI,gBAAAA,IAAI,EAAJA,IAAF;AAAQC,gBAAAA,QAAQ,EAARA,QAAR;AAAkBC,gBAAAA,QAAQ,EAAEkB;AAA5B,eAAd,EAAsD,OAAKI,UAA3D;;AA3BgB;AAAA;;AAAA;AAAA;AAAA;AA6BhB;AACAC,cAAAA,KAAK,0EAAL;AAGAZ,cAAAA,OAAO,CAACa,KAAR;;AAjCgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;WAqCpBF,U;;;;6BAAa;AAAA;AAAA;AAAA;AAAA;AAAA;AACHtB,cAAAA,QADG,GACU,OAAKb,KADf,CACHa,QADG,EAGX;;AAHW;AAAA,qBAIYA,QAAQ,CAACyB,OAAT,CAAiBC,QAAjB,GAA4BC,IAA5B,EAJZ;;AAAA;AAILC,cAAAA,QAJK;AAKXjB,cAAAA,OAAO,CAACC,GAAR,CAAYgB,QAAZ,EALW,CAOX;;AACA,qBAAKlC,QAAL,CAAc;AAAEG,gBAAAA,YAAY,EAAE+B;AAAhB,eAAd;;AARW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;;;;;iCAWAC,K,EAAO;AAClB;AACA,WAAKnC,QAAL,CAAc;AAAEO,QAAAA,QAAQ,EAAE4B,KAAK,CAACC,MAAN,CAAaC;AAAzB,OAAd;AACD;;;;;;iDAEkBF,K;;;;;;;;;AACjB;;;;;AAMAA,gBAAAA,KAAK,CAACG,cAAN;8BAC+B,KAAK7C,K,EAA5BY,Q,eAAAA,Q,EAAUC,Q,eAAAA,Q;AAClBW,gBAAAA,OAAO,CAACC,GAAR,CAAY,qBAAqB;AAAEqB,kBAAAA,IAAI,EAAElC,QAAQ,CAAC,CAAD;AAAhB,iBAAjC;AACA,qBAAKL,QAAL,CAAc;AAAEQ,kBAAAA,OAAO,EAAE;AAAX,iBAAd;AACAS,gBAAAA,OAAO,CAACC,GAAR,CAAY,uBAAuB,KAAKzB,KAAL,CAAWe,OAA9C;AACAS,gBAAAA,OAAO,CAACC,GAAR,CAAY,gBAAgB,KAAKzB,KAAL,CAAWgB,QAAvC;AACA;;;;;;;;AAQAH,gBAAAA,QAAQ,CAACkC,MAAT,CACGC,aADH,EAEI;AACA,kBAHJ,EAII;AACEC,kBAAAA,SAAS,EAAE;AADb,iBAJJ,EAOI,UAACZ,KAAD,EAAQI,QAAR,EAAqB;AACnBjB,kBAAAA,OAAO,CAACC,GAAR,CAAYiB,KAAZ;AACD,iBATL,EAWGQ,EAXH,CAWM,MAXN,EAWc,UAAAT,QAAQ,EAAI;AACtBjB,kBAAAA,OAAO,CAACC,GAAR,CAAY,sBAAsBgB,QAAQ,CAACU,YAAT,CAAsBP,KAAxD;;AACA,kBAAA,MAAI,CAACrC,QAAL,CAAc;AAAEG,oBAAAA,YAAY,EAAE+B,QAAQ,CAACU,YAAT,CAAsBP,KAAtC;AAA6C9B,oBAAAA,QAAQ,EAAE,EAAvD;AAA2DC,oBAAAA,OAAO,EAAE;AAApE,mBAAd;AACD,iBAdH,EAeGmC,EAfH,CAeM,OAfN,EAee1B,OAAO,CAACa,KAfvB;AAiBA;;;;;;;;;;AASAxB,gBAAAA,QAAQ,CAACyB,OAAT,CAAiBc,QAAjB,CAA0B,KAAKpD,KAAL,CAAWc,QAArC,EAA+CuC,IAA/C,CAAoD;AAAEP,kBAAAA,IAAI,EAAElC,QAAQ,CAAC,CAAD;AAAhB,iBAApD;AACA;;;;;;;;;AAQJ;;;;;;;AAOI;AACA;AACA;;;;;;;;;;;;;;AAEF;;;;;;;;;;;;;;;;;;;;AAmBA;;;;;;;;;;;;;6BAWS;AACPY,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAqB,KAAKzB,KAAL,CAAWe,OAA5C;;AACA,UAAI,CAAC,KAAKf,KAAL,CAAWW,IAAhB,EAAsB;AACpB,eAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qDAAP;AACD,OAJM,CAMP;;;AACA;AACE;;;;;;;;;AASA;AAAK,UAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCAA0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAI,KAAKX,KAAL,CAAWU,YAAf,CAA1B,CAFF,EAGE;AAAM,UAAA,QAAQ,EAAE,KAAKW,YAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAEE;AACE,UAAA,IAAI,EAAC,MADP;AAEE,UAAA,KAAK,EAAE,KAAKrB,KAAL,CAAWc,QAFpB;AAGE,UAAA,QAAQ,EAAE,KAAKK,YAHjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAFF,CADF,EASE;AAAO,UAAA,IAAI,EAAC,QAAZ;AAAqB,UAAA,KAAK,EAAC,QAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UATF,CAHF,EAcE,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAdF;AAVF,QAPO,CAkCP;AACD;;;;EArMezB,S;;AAwMlB,eAAee,GAAf;AACA","sourcesContent":["import React, { Component } from \"react\";\n//import SimpleStorageContract from \"../../build/contracts/SimpleStorage.json\"; investigate build directory\nimport SimpleStorageContract from \"./contracts/SimpleStorage.json\";\nimport getWeb3 from \"./utils/getWeb3\";\nimport detectMob from \"./utils/getWeb3\";\n\nimport \"./App.css\";\n\nclass Clock extends Component {\n  constructor(props){\n    super(props);\n    this.state= {date: new Date()};\n  }\n  componentDidMount() {\n    this.timerID = setInterval(\n      () => this.tick(),\n      1000\n    );\n  }\n  componentWillMount() {\n    clearInterval(this.timerID);\n  }\n\n  tick() {\n    this.setState({\n      date: new Date()\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <h2>The local tim is {this.state.date.toLocaleTimeString()}</h2>\n      </div>\n    );\n  }\n}\n\nclass App extends Component {\n  state = {\n    storageValue: \"\",\n    web3: null,\n    accounts: null,\n    contract: null,\n    newValue: \"\",\n    loading: false,\n    isMobile: false\n  };\n  //state = { storageValue: \"\", web3: null, accounts: null, contract: null, newValue: \"\" };\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n      const getMobile = await detectMob();\n      this.handleChange = this.handleChange.bind(this);\n      this.handleSubmit = this.handleSubmit.bind(this);\n      //this.Set = this.Set.bind(this);\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts(); //the active account in metamask\n      this.setState({ isMobile: getMobile });\n      console.log(\"accounts: \" + accounts);\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      console.log(\"NetworkID: \" + networkId);\n      const deployedNetwork = SimpleStorageContract.networks[networkId];\n      console.log(\"deployedNetwork: \" + deployedNetwork);\n      const instance = new web3.eth.Contract(\n        SimpleStorageContract.abi,\n        deployedNetwork && deployedNetwork.address\n      );\n      console.log(\"SimpleStorageContract.abi: \" + SimpleStorageContract.abi);\n      //console.log(\"deployedNetwork and address: \" + deployedNetwork && deployedNetwork.address);\n      console.log(instance);\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ web3, accounts, contract: instance }, this.runExample);\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`\n      );\n      console.error(error);\n    }\n  };\n\n  runExample = async () => {\n    const { contract } = this.state;\n\n    // Get the value from the contract to prove it worked.\n    const response = await contract.methods.getValue().call();\n    console.log(response);\n\n    // Update state with the result.\n    this.setState({ storageValue: response });\n  };\n\n  handleChange(event) {\n    //console.log(this.state.newValue);\n    this.setState({ newValue: event.target.value });\n  }\n\n  async handleSubmit(event) {\n    /* TESTING\n    alert('A name was submitted: ' + this.state.newValue);\n    event.preventDefault();\n    this.setState({newValue: \"\"});\n    */\n\n    event.preventDefault();\n    const { accounts, contract } = this.state;\n    console.log(\"save account[0]:\" + { from: accounts[0] });\n    this.setState({ loading: true });\n    console.log(\"onsave loading 1: \" + this.state.loading);\n    console.log(\"isMobile = \" + this.state.isMobile);\n    /*\n    const receipt = await contract.methods\n      .set(this.state.newValue)\n      .send({ from: accounts[0] }, (error, transactionHash) => {\n        console.log('Hash Returned' + transactionHash)\n      });\n*/\n\n    contract.events\n      .setValueEvent(\n        //https://github.com/trufflesuite/truffle/issues/1254\n        {},\n        {\n          fromBlock: 0\n        },\n        (error, response) => {\n          console.log(event);\n        }\n      )\n      .on(\"data\", response => {\n        console.log(\"The event value: \" + response.returnValues.value);\n        this.setState({ storageValue: response.returnValues.value, newValue: \"\", loading: false });\n      })\n      .on(\"error\", console.error);\n\n    /*\n  //https://github.com/trufflesuite/truffle/issues/1254\n    const myevent = contract.events.setValueEvent (\n      {},\n      {\n        fromBlock: 0,\n        toBlock: 'latest'\n      });\n*/\n    contract.methods.setValue(this.state.newValue).send({ from: accounts[0] });\n    /*\n    contract.methods\n      .setValue(this.state.newValue)\n      .send({ from: accounts[0] })\n      .on(\"receipt\", receipt => {\n        console.log(receipt.storedValue);\n    });\n*/\n/* ORIGINAL CODE\n    console.log(\"onsave loading 2: \" + this.state.loading);\n\n    const response = await contract.methods.getValue().call();\n    console.log(\"save response:\" + response);\n    this.setState({ storageValue: response, newValue: \"\", loading: false });\n*/\n    //this.setState({storageValue: response});\n    // reset the text box variable\n    //this.setState({newValue: \"\"});\n  }\n  /*\n  storedValueEvent() {\n    //https://github.com/trufflesuite/truffle/issues/1254\n    this.contract\n      .storedValue(\n        {},\n        {\n          fromBlock: 0\n        },\n        (error, event) => {\n          console.log(event);\n        }\n      )\n      .on(\"data\", event => {\n        this.setState({ loading: false });\n      })\n      .on(\"error\", console.error);\n  }\n*/\n  /*\n    storedValueEvent() {\n      this.contract.storedValue({}, {\n      fromBlock: 0,\n      toBlock: 'latest'\n      }).watch((error, event) => { \n        this.setState({ loading: false });\n      })\n    }\n    */\n\n  render() {\n    console.log(\"render loading: \" + this.state.loading);\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n\n    //\n    return (\n      /*\n        <form onSubmit={this.handleSubmit}>\n            <label>\n            New Value: \n            <input type=\"text\" value={this.state.newValue} onChange={this.handleChange} />\n            </label>\n            <input type=\"submit\" value=\"Submit\" />\n        </form>\n        */\n      <div className=\"App\">\n        <h1>Simple Dapp!</h1>\n        <div>The stored value is: <b>{this.state.storageValue}</b></div>\n        <form onSubmit={this.handleSubmit}>\n          <label>\n            New Value:\n            <input\n              type=\"text\"\n              value={this.state.newValue}\n              onChange={this.handleChange}\n            />\n          </label>\n          <input type=\"submit\" value=\"Submit\" />\n        </form>\n        <Clock />\n      </div>\n    );\n    //}\n  }\n}\n\nexport default App;\n/*\nclass App extends Component {\n  state = { storageValue: 0, web3: null, accounts: null, contract: null };\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n      console.log(accounts);\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      console.log(networkId);\n      const deployedNetwork = SimpleStorageContract.networks[networkId];\n      console.log(deployedNetwork);\n      const instance = new web3.eth.Contract(\n        SimpleStorageContract.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ web3, accounts, contract: instance }, this.runExample);\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n\n  runExample = async () => {\n    const { accounts, contract } = this.state;\n\n    // Stores a given value, 5 by default.\n    await contract.methods.set(82).send({ from: accounts[0] });\n\n    // Get the value from the contract to prove it worked.\n    const response = await contract.methods.get().call();\n\n    // Update state with the result.\n    this.setState({ storageValue: response });\n  };\n\n  render() {\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    return (\n      <div className=\"App\">\n        <h1>Good to Go!</h1>\n        <p>Your Truffle Box is installed and ready.</p>\n        <h2>Smart Contract Example</h2>\n        <p>\n          If your contracts compiled and migrated successfully, below will show\n          a stored value of 5 (by default).\n        </p>\n        <p>\n          Try changing the value stored on <strong>line 40</strong> of App.js.\n        </p>\n        <div>The stored value is: {this.state.storageValue}</div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n*/\n"]},"metadata":{},"sourceType":"module"}